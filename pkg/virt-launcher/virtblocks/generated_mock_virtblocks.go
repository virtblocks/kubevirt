// Automatically generated by MockGen. DO NOT EDIT!
// Source: virtblocks.go

package virtblocks

import (
	gomock "github.com/golang/mock/gomock"

	api "kubevirt.io/kubevirt/pkg/virt-launcher/virtwrap/api"
)

// Mock of VirtBlocks interface
type MockVirtBlocks struct {
	ctrl     *gomock.Controller
	recorder *_MockVirtBlocksRecorder
}

// Recorder for MockVirtBlocks (not exported)
type _MockVirtBlocksRecorder struct {
	mock *MockVirtBlocks
}

func NewMockVirtBlocks(ctrl *gomock.Controller) *MockVirtBlocks {
	mock := &MockVirtBlocks{ctrl: ctrl}
	mock.recorder = &_MockVirtBlocksRecorder{mock}
	return mock
}

func (_m *MockVirtBlocks) EXPECT() *_MockVirtBlocksRecorder {
	return _m.recorder
}

func (_m *MockVirtBlocks) GetDomain() (VirtBlockDomain, error) {
	ret := _m.ctrl.Call(_m, "GetDomain")
	ret0, _ := ret[0].(VirtBlockDomain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVirtBlocksRecorder) GetDomain() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetDomain")
}

// Mock of VirtBlockDomain interface
type MockVirtBlockDomain struct {
	ctrl     *gomock.Controller
	recorder *_MockVirtBlockDomainRecorder
}

// Recorder for MockVirtBlockDomain (not exported)
type _MockVirtBlockDomainRecorder struct {
	mock *MockVirtBlockDomain
}

func NewMockVirtBlockDomain(ctrl *gomock.Controller) *MockVirtBlockDomain {
	mock := &MockVirtBlockDomain{ctrl: ctrl}
	mock.recorder = &_MockVirtBlockDomainRecorder{mock}
	return mock
}

func (_m *MockVirtBlockDomain) EXPECT() *_MockVirtBlockDomainRecorder {
	return _m.recorder
}

func (_m *MockVirtBlockDomain) Destroy() error {
	ret := _m.ctrl.Call(_m, "Destroy")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVirtBlockDomainRecorder) Destroy() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Destroy")
}

func (_m *MockVirtBlockDomain) Shutdown() error {
	ret := _m.ctrl.Call(_m, "Shutdown")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVirtBlockDomainRecorder) Shutdown() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Shutdown")
}

func (_m *MockVirtBlockDomain) IsAlive() (bool, error) {
	ret := _m.ctrl.Call(_m, "IsAlive")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVirtBlockDomainRecorder) IsAlive() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsAlive")
}

func (_m *MockVirtBlockDomain) IsPaused() (bool, error) {
	ret := _m.ctrl.Call(_m, "IsPaused")
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVirtBlockDomainRecorder) IsPaused() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "IsPaused")
}

func (_m *MockVirtBlockDomain) Spec() (*api.Domain, error) {
	ret := _m.ctrl.Call(_m, "Spec")
	ret0, _ := ret[0].(*api.Domain)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

func (_mr *_MockVirtBlockDomainRecorder) Spec() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Spec")
}

func (_m *MockVirtBlockDomain) Create(_param0 *api.Domain) error {
	ret := _m.ctrl.Call(_m, "Create", _param0)
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVirtBlockDomainRecorder) Create(arg0 interface{}) *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Create", arg0)
}

func (_m *MockVirtBlockDomain) Resume() error {
	ret := _m.ctrl.Call(_m, "Resume")
	ret0, _ := ret[0].(error)
	return ret0
}

func (_mr *_MockVirtBlockDomainRecorder) Resume() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Resume")
}

func (_m *MockVirtBlockDomain) GetState() (api.LifeCycle, api.StateChangeReason, error) {
	ret := _m.ctrl.Call(_m, "GetState")
	ret0, _ := ret[0].(api.LifeCycle)
	ret1, _ := ret[1].(api.StateChangeReason)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

func (_mr *_MockVirtBlockDomainRecorder) GetState() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "GetState")
}

func (_m *MockVirtBlockDomain) Name() string {
	ret := _m.ctrl.Call(_m, "Name")
	ret0, _ := ret[0].(string)
	return ret0
}

func (_mr *_MockVirtBlockDomainRecorder) Name() *gomock.Call {
	return _mr.mock.ctrl.RecordCall(_mr.mock, "Name")
}
